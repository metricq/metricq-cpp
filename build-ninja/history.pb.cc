// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: history.proto

#include "history.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_history_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HistoryResponse_Aggregate_history_2eproto;
namespace metricq {
class HistoryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HistoryRequest> _instance;
} _HistoryRequest_default_instance_;
class HistoryResponse_AggregateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HistoryResponse_Aggregate> _instance;
} _HistoryResponse_Aggregate_default_instance_;
class HistoryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HistoryResponse> _instance;
} _HistoryResponse_default_instance_;
}  // namespace metricq
static void InitDefaultsscc_info_HistoryRequest_history_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metricq::_HistoryRequest_default_instance_;
    new (ptr) ::metricq::HistoryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metricq::HistoryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HistoryRequest_history_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HistoryRequest_history_2eproto}, {}};

static void InitDefaultsscc_info_HistoryResponse_history_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metricq::_HistoryResponse_default_instance_;
    new (ptr) ::metricq::HistoryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metricq::HistoryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HistoryResponse_history_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HistoryResponse_history_2eproto}, {
      &scc_info_HistoryResponse_Aggregate_history_2eproto.base,}};

static void InitDefaultsscc_info_HistoryResponse_Aggregate_history_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metricq::_HistoryResponse_Aggregate_default_instance_;
    new (ptr) ::metricq::HistoryResponse_Aggregate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metricq::HistoryResponse_Aggregate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HistoryResponse_Aggregate_history_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HistoryResponse_Aggregate_history_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_history_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_history_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_history_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_history_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::metricq::HistoryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::metricq::HistoryRequest, start_time_),
  PROTOBUF_FIELD_OFFSET(::metricq::HistoryRequest, end_time_),
  PROTOBUF_FIELD_OFFSET(::metricq::HistoryRequest, interval_max_),
  PROTOBUF_FIELD_OFFSET(::metricq::HistoryRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::metricq::HistoryResponse_Aggregate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::metricq::HistoryResponse_Aggregate, minimum_),
  PROTOBUF_FIELD_OFFSET(::metricq::HistoryResponse_Aggregate, maximum_),
  PROTOBUF_FIELD_OFFSET(::metricq::HistoryResponse_Aggregate, sum_),
  PROTOBUF_FIELD_OFFSET(::metricq::HistoryResponse_Aggregate, count_),
  PROTOBUF_FIELD_OFFSET(::metricq::HistoryResponse_Aggregate, integral_),
  PROTOBUF_FIELD_OFFSET(::metricq::HistoryResponse_Aggregate, active_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::metricq::HistoryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::metricq::HistoryResponse, metric_),
  PROTOBUF_FIELD_OFFSET(::metricq::HistoryResponse, time_delta_),
  PROTOBUF_FIELD_OFFSET(::metricq::HistoryResponse, value_min_),
  PROTOBUF_FIELD_OFFSET(::metricq::HistoryResponse, value_max_),
  PROTOBUF_FIELD_OFFSET(::metricq::HistoryResponse, value_avg_),
  PROTOBUF_FIELD_OFFSET(::metricq::HistoryResponse, aggregate_),
  PROTOBUF_FIELD_OFFSET(::metricq::HistoryResponse, value_),
  PROTOBUF_FIELD_OFFSET(::metricq::HistoryResponse, error_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::metricq::HistoryRequest)},
  { 9, -1, sizeof(::metricq::HistoryResponse_Aggregate)},
  { 20, -1, sizeof(::metricq::HistoryResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::metricq::_HistoryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::metricq::_HistoryResponse_Aggregate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::metricq::_HistoryResponse_default_instance_),
};

const char descriptor_table_protodef_history_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rhistory.proto\022\007metricq\"\330\001\n\016HistoryRequ"
  "est\022\022\n\nstart_time\030\001 \001(\003\022\020\n\010end_time\030\002 \001("
  "\003\022\024\n\014interval_max\030\003 \001(\003\0221\n\004type\030\004 \001(\0162#."
  "metricq.HistoryRequest.RequestType\"W\n\013Re"
  "questType\022\026\n\022AGGREGATE_TIMELINE\020\000\022\r\n\tAGG"
  "REGATE\020\001\022\016\n\nLAST_VALUE\020\002\022\021\n\rFLEX_TIMELIN"
  "E\020\003\"\301\002\n\017HistoryResponse\022\016\n\006metric\030\001 \001(\t\022"
  "\022\n\ntime_delta\030\002 \003(\003\022\025\n\tvalue_min\030\003 \003(\001B\002"
  "\030\001\022\025\n\tvalue_max\030\004 \003(\001B\002\030\001\022\025\n\tvalue_avg\030\005"
  " \003(\001B\002\030\001\0225\n\taggregate\030\006 \003(\0132\".metricq.Hi"
  "storyResponse.Aggregate\022\r\n\005value\030\007 \003(\001\022\r"
  "\n\005error\030\010 \001(\t\032p\n\tAggregate\022\017\n\007minimum\030\001 "
  "\001(\001\022\017\n\007maximum\030\002 \001(\001\022\013\n\003sum\030\003 \001(\001\022\r\n\005cou"
  "nt\030\004 \001(\004\022\020\n\010integral\030\005 \001(\001\022\023\n\013active_tim"
  "e\030\006 \001(\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_history_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_history_2eproto_sccs[3] = {
  &scc_info_HistoryRequest_history_2eproto.base,
  &scc_info_HistoryResponse_history_2eproto.base,
  &scc_info_HistoryResponse_Aggregate_history_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_history_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_history_2eproto = {
  false, false, descriptor_table_protodef_history_2eproto, "history.proto", 575,
  &descriptor_table_history_2eproto_once, descriptor_table_history_2eproto_sccs, descriptor_table_history_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_history_2eproto::offsets,
  file_level_metadata_history_2eproto, 3, file_level_enum_descriptors_history_2eproto, file_level_service_descriptors_history_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_history_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_history_2eproto)), true);
namespace metricq {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HistoryRequest_RequestType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_history_2eproto);
  return file_level_enum_descriptors_history_2eproto[0];
}
bool HistoryRequest_RequestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HistoryRequest_RequestType HistoryRequest::AGGREGATE_TIMELINE;
constexpr HistoryRequest_RequestType HistoryRequest::AGGREGATE;
constexpr HistoryRequest_RequestType HistoryRequest::LAST_VALUE;
constexpr HistoryRequest_RequestType HistoryRequest::FLEX_TIMELINE;
constexpr HistoryRequest_RequestType HistoryRequest::RequestType_MIN;
constexpr HistoryRequest_RequestType HistoryRequest::RequestType_MAX;
constexpr int HistoryRequest::RequestType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void HistoryRequest::InitAsDefaultInstance() {
}
class HistoryRequest::_Internal {
 public:
};

HistoryRequest::HistoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:metricq.HistoryRequest)
}
HistoryRequest::HistoryRequest(const HistoryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_time_, &from.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:metricq.HistoryRequest)
}

void HistoryRequest::SharedCtor() {
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(type_));
}

HistoryRequest::~HistoryRequest() {
  // @@protoc_insertion_point(destructor:metricq.HistoryRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HistoryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HistoryRequest::ArenaDtor(void* object) {
  HistoryRequest* _this = reinterpret_cast< HistoryRequest* >(object);
  (void)_this;
}
void HistoryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HistoryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HistoryRequest& HistoryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HistoryRequest_history_2eproto.base);
  return *internal_default_instance();
}


void HistoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:metricq.HistoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistoryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 end_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 interval_max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          interval_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .metricq.HistoryRequest.RequestType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::metricq::HistoryRequest_RequestType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HistoryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metricq.HistoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start_time = 1;
  if (this->start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_start_time(), target);
  }

  // int64 end_time = 2;
  if (this->end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_end_time(), target);
  }

  // int64 interval_max = 3;
  if (this->interval_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_interval_max(), target);
  }

  // .metricq.HistoryRequest.RequestType type = 4;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metricq.HistoryRequest)
  return target;
}

size_t HistoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metricq.HistoryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 start_time = 1;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_start_time());
  }

  // int64 end_time = 2;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_end_time());
  }

  // int64 interval_max = 3;
  if (this->interval_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_interval_max());
  }

  // .metricq.HistoryRequest.RequestType type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metricq.HistoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HistoryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metricq.HistoryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metricq.HistoryRequest)
    MergeFrom(*source);
  }
}

void HistoryRequest::MergeFrom(const HistoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metricq.HistoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_time() != 0) {
    _internal_set_start_time(from._internal_start_time());
  }
  if (from.end_time() != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
  if (from.interval_max() != 0) {
    _internal_set_interval_max(from._internal_interval_max());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void HistoryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metricq.HistoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryRequest::CopyFrom(const HistoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metricq.HistoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryRequest::IsInitialized() const {
  return true;
}

void HistoryRequest::InternalSwap(HistoryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HistoryRequest, type_)
      + sizeof(HistoryRequest::type_)
      - PROTOBUF_FIELD_OFFSET(HistoryRequest, start_time_)>(
          reinterpret_cast<char*>(&start_time_),
          reinterpret_cast<char*>(&other->start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HistoryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HistoryResponse_Aggregate::InitAsDefaultInstance() {
}
class HistoryResponse_Aggregate::_Internal {
 public:
};

HistoryResponse_Aggregate::HistoryResponse_Aggregate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:metricq.HistoryResponse.Aggregate)
}
HistoryResponse_Aggregate::HistoryResponse_Aggregate(const HistoryResponse_Aggregate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&minimum_, &from.minimum_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_time_) -
    reinterpret_cast<char*>(&minimum_)) + sizeof(active_time_));
  // @@protoc_insertion_point(copy_constructor:metricq.HistoryResponse.Aggregate)
}

void HistoryResponse_Aggregate::SharedCtor() {
  ::memset(&minimum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_time_) -
      reinterpret_cast<char*>(&minimum_)) + sizeof(active_time_));
}

HistoryResponse_Aggregate::~HistoryResponse_Aggregate() {
  // @@protoc_insertion_point(destructor:metricq.HistoryResponse.Aggregate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HistoryResponse_Aggregate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HistoryResponse_Aggregate::ArenaDtor(void* object) {
  HistoryResponse_Aggregate* _this = reinterpret_cast< HistoryResponse_Aggregate* >(object);
  (void)_this;
}
void HistoryResponse_Aggregate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HistoryResponse_Aggregate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HistoryResponse_Aggregate& HistoryResponse_Aggregate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HistoryResponse_Aggregate_history_2eproto.base);
  return *internal_default_instance();
}


void HistoryResponse_Aggregate::Clear() {
// @@protoc_insertion_point(message_clear_start:metricq.HistoryResponse.Aggregate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&minimum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_time_) -
      reinterpret_cast<char*>(&minimum_)) + sizeof(active_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistoryResponse_Aggregate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double minimum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          minimum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double maximum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          maximum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          sum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint64 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double integral = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          integral_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 active_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          active_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HistoryResponse_Aggregate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metricq.HistoryResponse.Aggregate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double minimum = 1;
  if (!(this->minimum() <= 0 && this->minimum() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_minimum(), target);
  }

  // double maximum = 2;
  if (!(this->maximum() <= 0 && this->maximum() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_maximum(), target);
  }

  // double sum = 3;
  if (!(this->sum() <= 0 && this->sum() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_sum(), target);
  }

  // uint64 count = 4;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_count(), target);
  }

  // double integral = 5;
  if (!(this->integral() <= 0 && this->integral() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_integral(), target);
  }

  // int64 active_time = 6;
  if (this->active_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_active_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metricq.HistoryResponse.Aggregate)
  return target;
}

size_t HistoryResponse_Aggregate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metricq.HistoryResponse.Aggregate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double minimum = 1;
  if (!(this->minimum() <= 0 && this->minimum() >= 0)) {
    total_size += 1 + 8;
  }

  // double maximum = 2;
  if (!(this->maximum() <= 0 && this->maximum() >= 0)) {
    total_size += 1 + 8;
  }

  // double sum = 3;
  if (!(this->sum() <= 0 && this->sum() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 count = 4;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_count());
  }

  // double integral = 5;
  if (!(this->integral() <= 0 && this->integral() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 active_time = 6;
  if (this->active_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_active_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoryResponse_Aggregate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metricq.HistoryResponse.Aggregate)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoryResponse_Aggregate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HistoryResponse_Aggregate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metricq.HistoryResponse.Aggregate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metricq.HistoryResponse.Aggregate)
    MergeFrom(*source);
  }
}

void HistoryResponse_Aggregate::MergeFrom(const HistoryResponse_Aggregate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metricq.HistoryResponse.Aggregate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.minimum() <= 0 && from.minimum() >= 0)) {
    _internal_set_minimum(from._internal_minimum());
  }
  if (!(from.maximum() <= 0 && from.maximum() >= 0)) {
    _internal_set_maximum(from._internal_maximum());
  }
  if (!(from.sum() <= 0 && from.sum() >= 0)) {
    _internal_set_sum(from._internal_sum());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (!(from.integral() <= 0 && from.integral() >= 0)) {
    _internal_set_integral(from._internal_integral());
  }
  if (from.active_time() != 0) {
    _internal_set_active_time(from._internal_active_time());
  }
}

void HistoryResponse_Aggregate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metricq.HistoryResponse.Aggregate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryResponse_Aggregate::CopyFrom(const HistoryResponse_Aggregate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metricq.HistoryResponse.Aggregate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryResponse_Aggregate::IsInitialized() const {
  return true;
}

void HistoryResponse_Aggregate::InternalSwap(HistoryResponse_Aggregate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HistoryResponse_Aggregate, active_time_)
      + sizeof(HistoryResponse_Aggregate::active_time_)
      - PROTOBUF_FIELD_OFFSET(HistoryResponse_Aggregate, minimum_)>(
          reinterpret_cast<char*>(&minimum_),
          reinterpret_cast<char*>(&other->minimum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HistoryResponse_Aggregate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HistoryResponse::InitAsDefaultInstance() {
}
class HistoryResponse::_Internal {
 public:
};

HistoryResponse::HistoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  time_delta_(arena),
  value_min_(arena),
  value_max_(arena),
  value_avg_(arena),
  aggregate_(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:metricq.HistoryResponse)
}
HistoryResponse::HistoryResponse(const HistoryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      time_delta_(from.time_delta_),
      value_min_(from.value_min_),
      value_max_(from.value_max_),
      value_avg_(from.value_avg_),
      aggregate_(from.aggregate_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metric_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_metric().empty()) {
    metric_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_metric(),
      GetArena());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_error(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:metricq.HistoryResponse)
}

void HistoryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HistoryResponse_history_2eproto.base);
  metric_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HistoryResponse::~HistoryResponse() {
  // @@protoc_insertion_point(destructor:metricq.HistoryResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HistoryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  metric_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HistoryResponse::ArenaDtor(void* object) {
  HistoryResponse* _this = reinterpret_cast< HistoryResponse* >(object);
  (void)_this;
}
void HistoryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HistoryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HistoryResponse& HistoryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HistoryResponse_history_2eproto.base);
  return *internal_default_instance();
}


void HistoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:metricq.HistoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_delta_.Clear();
  value_min_.Clear();
  value_max_.Clear();
  value_avg_.Clear();
  aggregate_.Clear();
  value_.Clear();
  metric_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  error_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistoryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string metric = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_metric();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "metricq.HistoryResponse.metric"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 time_delta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_time_delta(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_time_delta(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double value_min = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_value_min(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          _internal_add_value_min(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double value_max = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_value_max(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33) {
          _internal_add_value_max(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double value_avg = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_value_avg(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41) {
          _internal_add_value_avg(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .metricq.HistoryResponse.Aggregate aggregate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_aggregate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated double value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string error = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "metricq.HistoryResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HistoryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metricq.HistoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string metric = 1;
  if (this->metric().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metric().data(), static_cast<int>(this->_internal_metric().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "metricq.HistoryResponse.metric");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_metric(), target);
  }

  // repeated int64 time_delta = 2;
  {
    int byte_size = _time_delta_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_time_delta(), byte_size, target);
    }
  }

  // repeated double value_min = 3 [deprecated = true];
  if (this->_internal_value_min_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_value_min(), target);
  }

  // repeated double value_max = 4 [deprecated = true];
  if (this->_internal_value_max_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_value_max(), target);
  }

  // repeated double value_avg = 5 [deprecated = true];
  if (this->_internal_value_avg_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_value_avg(), target);
  }

  // repeated .metricq.HistoryResponse.Aggregate aggregate = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_aggregate_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_aggregate(i), target, stream);
  }

  // repeated double value = 7;
  if (this->_internal_value_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_value(), target);
  }

  // string error = 8;
  if (this->error().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "metricq.HistoryResponse.error");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metricq.HistoryResponse)
  return target;
}

size_t HistoryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metricq.HistoryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 time_delta = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->time_delta_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _time_delta_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double value_min = 3 [deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_value_min_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_min_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double value_max = 4 [deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_value_max_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_max_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double value_avg = 5 [deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_value_avg_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_avg_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .metricq.HistoryResponse.Aggregate aggregate = 6;
  total_size += 1UL * this->_internal_aggregate_size();
  for (const auto& msg : this->aggregate_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated double value = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_value_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string metric = 1;
  if (this->metric().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metric());
  }

  // string error = 8;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metricq.HistoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HistoryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metricq.HistoryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metricq.HistoryResponse)
    MergeFrom(*source);
  }
}

void HistoryResponse::MergeFrom(const HistoryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metricq.HistoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  time_delta_.MergeFrom(from.time_delta_);
  value_min_.MergeFrom(from.value_min_);
  value_max_.MergeFrom(from.value_max_);
  value_avg_.MergeFrom(from.value_avg_);
  aggregate_.MergeFrom(from.aggregate_);
  value_.MergeFrom(from.value_);
  if (from.metric().size() > 0) {
    _internal_set_metric(from._internal_metric());
  }
  if (from.error().size() > 0) {
    _internal_set_error(from._internal_error());
  }
}

void HistoryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metricq.HistoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryResponse::CopyFrom(const HistoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metricq.HistoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryResponse::IsInitialized() const {
  return true;
}

void HistoryResponse::InternalSwap(HistoryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  time_delta_.InternalSwap(&other->time_delta_);
  value_min_.InternalSwap(&other->value_min_);
  value_max_.InternalSwap(&other->value_max_);
  value_avg_.InternalSwap(&other->value_avg_);
  aggregate_.InternalSwap(&other->aggregate_);
  value_.InternalSwap(&other->value_);
  metric_.Swap(&other->metric_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata HistoryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metricq
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::metricq::HistoryRequest* Arena::CreateMaybeMessage< ::metricq::HistoryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metricq::HistoryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::metricq::HistoryResponse_Aggregate* Arena::CreateMaybeMessage< ::metricq::HistoryResponse_Aggregate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metricq::HistoryResponse_Aggregate >(arena);
}
template<> PROTOBUF_NOINLINE ::metricq::HistoryResponse* Arena::CreateMaybeMessage< ::metricq::HistoryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metricq::HistoryResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
