// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datachunk.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_datachunk_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_datachunk_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_datachunk_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_datachunk_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_datachunk_2eproto;
namespace metricq {
class DataChunk;
class DataChunkDefaultTypeInternal;
extern DataChunkDefaultTypeInternal _DataChunk_default_instance_;
}  // namespace metricq
PROTOBUF_NAMESPACE_OPEN
template<> ::metricq::DataChunk* Arena::CreateMaybeMessage<::metricq::DataChunk>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace metricq {

// ===================================================================

class DataChunk PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:metricq.DataChunk) */ {
 public:
  inline DataChunk() : DataChunk(nullptr) {};
  virtual ~DataChunk();

  DataChunk(const DataChunk& from);
  DataChunk(DataChunk&& from) noexcept
    : DataChunk() {
    *this = ::std::move(from);
  }

  inline DataChunk& operator=(const DataChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataChunk& operator=(DataChunk&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataChunk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataChunk* internal_default_instance() {
    return reinterpret_cast<const DataChunk*>(
               &_DataChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DataChunk& a, DataChunk& b) {
    a.Swap(&b);
  }
  inline void Swap(DataChunk* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataChunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataChunk* New() const final {
    return CreateMaybeMessage<DataChunk>(nullptr);
  }

  DataChunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataChunk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataChunk& from);
  void MergeFrom(const DataChunk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataChunk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metricq.DataChunk";
  }
  protected:
  explicit DataChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_datachunk_2eproto);
    return ::descriptor_table_datachunk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeDeltaFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // repeated int64 time_delta = 1;
  int time_delta_size() const;
  private:
  int _internal_time_delta_size() const;
  public:
  void clear_time_delta();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_delta(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_time_delta() const;
  void _internal_add_time_delta(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_time_delta();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 time_delta(int index) const;
  void set_time_delta(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_time_delta(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      time_delta() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_time_delta();

  // repeated double value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  double _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_value() const;
  void _internal_add_value(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_value();
  public:
  double value(int index) const;
  void set_value(int index, double value);
  void add_value(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:metricq.DataChunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > time_delta_;
  mutable std::atomic<int> _time_delta_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_datachunk_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataChunk

// repeated int64 time_delta = 1;
inline int DataChunk::_internal_time_delta_size() const {
  return time_delta_.size();
}
inline int DataChunk::time_delta_size() const {
  return _internal_time_delta_size();
}
inline void DataChunk::clear_time_delta() {
  time_delta_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DataChunk::_internal_time_delta(int index) const {
  return time_delta_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DataChunk::time_delta(int index) const {
  // @@protoc_insertion_point(field_get:metricq.DataChunk.time_delta)
  return _internal_time_delta(index);
}
inline void DataChunk::set_time_delta(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  time_delta_.Set(index, value);
  // @@protoc_insertion_point(field_set:metricq.DataChunk.time_delta)
}
inline void DataChunk::_internal_add_time_delta(::PROTOBUF_NAMESPACE_ID::int64 value) {
  time_delta_.Add(value);
}
inline void DataChunk::add_time_delta(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_time_delta(value);
  // @@protoc_insertion_point(field_add:metricq.DataChunk.time_delta)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
DataChunk::_internal_time_delta() const {
  return time_delta_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
DataChunk::time_delta() const {
  // @@protoc_insertion_point(field_list:metricq.DataChunk.time_delta)
  return _internal_time_delta();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
DataChunk::_internal_mutable_time_delta() {
  return &time_delta_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
DataChunk::mutable_time_delta() {
  // @@protoc_insertion_point(field_mutable_list:metricq.DataChunk.time_delta)
  return _internal_mutable_time_delta();
}

// repeated double value = 2;
inline int DataChunk::_internal_value_size() const {
  return value_.size();
}
inline int DataChunk::value_size() const {
  return _internal_value_size();
}
inline void DataChunk::clear_value() {
  value_.Clear();
}
inline double DataChunk::_internal_value(int index) const {
  return value_.Get(index);
}
inline double DataChunk::value(int index) const {
  // @@protoc_insertion_point(field_get:metricq.DataChunk.value)
  return _internal_value(index);
}
inline void DataChunk::set_value(int index, double value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:metricq.DataChunk.value)
}
inline void DataChunk::_internal_add_value(double value) {
  value_.Add(value);
}
inline void DataChunk::add_value(double value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:metricq.DataChunk.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DataChunk::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DataChunk::value() const {
  // @@protoc_insertion_point(field_list:metricq.DataChunk.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DataChunk::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DataChunk::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:metricq.DataChunk.value)
  return _internal_mutable_value();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace metricq

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_datachunk_2eproto
