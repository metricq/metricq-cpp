// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: history.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_history_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_history_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_history_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_history_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_history_2eproto;
namespace metricq {
class HistoryRequest;
class HistoryRequestDefaultTypeInternal;
extern HistoryRequestDefaultTypeInternal _HistoryRequest_default_instance_;
class HistoryResponse;
class HistoryResponseDefaultTypeInternal;
extern HistoryResponseDefaultTypeInternal _HistoryResponse_default_instance_;
class HistoryResponse_Aggregate;
class HistoryResponse_AggregateDefaultTypeInternal;
extern HistoryResponse_AggregateDefaultTypeInternal _HistoryResponse_Aggregate_default_instance_;
}  // namespace metricq
PROTOBUF_NAMESPACE_OPEN
template<> ::metricq::HistoryRequest* Arena::CreateMaybeMessage<::metricq::HistoryRequest>(Arena*);
template<> ::metricq::HistoryResponse* Arena::CreateMaybeMessage<::metricq::HistoryResponse>(Arena*);
template<> ::metricq::HistoryResponse_Aggregate* Arena::CreateMaybeMessage<::metricq::HistoryResponse_Aggregate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace metricq {

enum HistoryRequest_RequestType : int {
  HistoryRequest_RequestType_AGGREGATE_TIMELINE = 0,
  HistoryRequest_RequestType_AGGREGATE = 1,
  HistoryRequest_RequestType_LAST_VALUE = 2,
  HistoryRequest_RequestType_FLEX_TIMELINE = 3,
  HistoryRequest_RequestType_HistoryRequest_RequestType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  HistoryRequest_RequestType_HistoryRequest_RequestType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool HistoryRequest_RequestType_IsValid(int value);
constexpr HistoryRequest_RequestType HistoryRequest_RequestType_RequestType_MIN = HistoryRequest_RequestType_AGGREGATE_TIMELINE;
constexpr HistoryRequest_RequestType HistoryRequest_RequestType_RequestType_MAX = HistoryRequest_RequestType_FLEX_TIMELINE;
constexpr int HistoryRequest_RequestType_RequestType_ARRAYSIZE = HistoryRequest_RequestType_RequestType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HistoryRequest_RequestType_descriptor();
template<typename T>
inline const std::string& HistoryRequest_RequestType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HistoryRequest_RequestType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HistoryRequest_RequestType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HistoryRequest_RequestType_descriptor(), enum_t_value);
}
inline bool HistoryRequest_RequestType_Parse(
    const std::string& name, HistoryRequest_RequestType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HistoryRequest_RequestType>(
    HistoryRequest_RequestType_descriptor(), name, value);
}
// ===================================================================

class HistoryRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:metricq.HistoryRequest) */ {
 public:
  inline HistoryRequest() : HistoryRequest(nullptr) {};
  virtual ~HistoryRequest();

  HistoryRequest(const HistoryRequest& from);
  HistoryRequest(HistoryRequest&& from) noexcept
    : HistoryRequest() {
    *this = ::std::move(from);
  }

  inline HistoryRequest& operator=(const HistoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoryRequest& operator=(HistoryRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HistoryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HistoryRequest* internal_default_instance() {
    return reinterpret_cast<const HistoryRequest*>(
               &_HistoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HistoryRequest& a, HistoryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HistoryRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistoryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistoryRequest* New() const final {
    return CreateMaybeMessage<HistoryRequest>(nullptr);
  }

  HistoryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistoryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HistoryRequest& from);
  void MergeFrom(const HistoryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistoryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metricq.HistoryRequest";
  }
  protected:
  explicit HistoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_history_2eproto);
    return ::descriptor_table_history_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef HistoryRequest_RequestType RequestType;
  static constexpr RequestType AGGREGATE_TIMELINE =
    HistoryRequest_RequestType_AGGREGATE_TIMELINE;
  static constexpr RequestType AGGREGATE =
    HistoryRequest_RequestType_AGGREGATE;
  static constexpr RequestType LAST_VALUE =
    HistoryRequest_RequestType_LAST_VALUE;
  static constexpr RequestType FLEX_TIMELINE =
    HistoryRequest_RequestType_FLEX_TIMELINE;
  static inline bool RequestType_IsValid(int value) {
    return HistoryRequest_RequestType_IsValid(value);
  }
  static constexpr RequestType RequestType_MIN =
    HistoryRequest_RequestType_RequestType_MIN;
  static constexpr RequestType RequestType_MAX =
    HistoryRequest_RequestType_RequestType_MAX;
  static constexpr int RequestType_ARRAYSIZE =
    HistoryRequest_RequestType_RequestType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RequestType_descriptor() {
    return HistoryRequest_RequestType_descriptor();
  }
  template<typename T>
  static inline const std::string& RequestType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RequestType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RequestType_Name.");
    return HistoryRequest_RequestType_Name(enum_t_value);
  }
  static inline bool RequestType_Parse(const std::string& name,
      RequestType* value) {
    return HistoryRequest_RequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStartTimeFieldNumber = 1,
    kEndTimeFieldNumber = 2,
    kIntervalMaxFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // int64 start_time = 1;
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::int64 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 end_time = 2;
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::int64 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 interval_max = 3;
  void clear_interval_max();
  ::PROTOBUF_NAMESPACE_ID::int64 interval_max() const;
  void set_interval_max(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_interval_max() const;
  void _internal_set_interval_max(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .metricq.HistoryRequest.RequestType type = 4;
  void clear_type();
  ::metricq::HistoryRequest_RequestType type() const;
  void set_type(::metricq::HistoryRequest_RequestType value);
  private:
  ::metricq::HistoryRequest_RequestType _internal_type() const;
  void _internal_set_type(::metricq::HistoryRequest_RequestType value);
  public:

  // @@protoc_insertion_point(class_scope:metricq.HistoryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 interval_max_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_history_2eproto;
};
// -------------------------------------------------------------------

class HistoryResponse_Aggregate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:metricq.HistoryResponse.Aggregate) */ {
 public:
  inline HistoryResponse_Aggregate() : HistoryResponse_Aggregate(nullptr) {};
  virtual ~HistoryResponse_Aggregate();

  HistoryResponse_Aggregate(const HistoryResponse_Aggregate& from);
  HistoryResponse_Aggregate(HistoryResponse_Aggregate&& from) noexcept
    : HistoryResponse_Aggregate() {
    *this = ::std::move(from);
  }

  inline HistoryResponse_Aggregate& operator=(const HistoryResponse_Aggregate& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoryResponse_Aggregate& operator=(HistoryResponse_Aggregate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HistoryResponse_Aggregate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HistoryResponse_Aggregate* internal_default_instance() {
    return reinterpret_cast<const HistoryResponse_Aggregate*>(
               &_HistoryResponse_Aggregate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HistoryResponse_Aggregate& a, HistoryResponse_Aggregate& b) {
    a.Swap(&b);
  }
  inline void Swap(HistoryResponse_Aggregate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistoryResponse_Aggregate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistoryResponse_Aggregate* New() const final {
    return CreateMaybeMessage<HistoryResponse_Aggregate>(nullptr);
  }

  HistoryResponse_Aggregate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistoryResponse_Aggregate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HistoryResponse_Aggregate& from);
  void MergeFrom(const HistoryResponse_Aggregate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistoryResponse_Aggregate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metricq.HistoryResponse.Aggregate";
  }
  protected:
  explicit HistoryResponse_Aggregate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_history_2eproto);
    return ::descriptor_table_history_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinimumFieldNumber = 1,
    kMaximumFieldNumber = 2,
    kSumFieldNumber = 3,
    kCountFieldNumber = 4,
    kIntegralFieldNumber = 5,
    kActiveTimeFieldNumber = 6,
  };
  // double minimum = 1;
  void clear_minimum();
  double minimum() const;
  void set_minimum(double value);
  private:
  double _internal_minimum() const;
  void _internal_set_minimum(double value);
  public:

  // double maximum = 2;
  void clear_maximum();
  double maximum() const;
  void set_maximum(double value);
  private:
  double _internal_maximum() const;
  void _internal_set_maximum(double value);
  public:

  // double sum = 3;
  void clear_sum();
  double sum() const;
  void set_sum(double value);
  private:
  double _internal_sum() const;
  void _internal_set_sum(double value);
  public:

  // uint64 count = 4;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double integral = 5;
  void clear_integral();
  double integral() const;
  void set_integral(double value);
  private:
  double _internal_integral() const;
  void _internal_set_integral(double value);
  public:

  // int64 active_time = 6;
  void clear_active_time();
  ::PROTOBUF_NAMESPACE_ID::int64 active_time() const;
  void set_active_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_active_time() const;
  void _internal_set_active_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:metricq.HistoryResponse.Aggregate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double minimum_;
  double maximum_;
  double sum_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_;
  double integral_;
  ::PROTOBUF_NAMESPACE_ID::int64 active_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_history_2eproto;
};
// -------------------------------------------------------------------

class HistoryResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:metricq.HistoryResponse) */ {
 public:
  inline HistoryResponse() : HistoryResponse(nullptr) {};
  virtual ~HistoryResponse();

  HistoryResponse(const HistoryResponse& from);
  HistoryResponse(HistoryResponse&& from) noexcept
    : HistoryResponse() {
    *this = ::std::move(from);
  }

  inline HistoryResponse& operator=(const HistoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoryResponse& operator=(HistoryResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HistoryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HistoryResponse* internal_default_instance() {
    return reinterpret_cast<const HistoryResponse*>(
               &_HistoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HistoryResponse& a, HistoryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HistoryResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistoryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistoryResponse* New() const final {
    return CreateMaybeMessage<HistoryResponse>(nullptr);
  }

  HistoryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistoryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HistoryResponse& from);
  void MergeFrom(const HistoryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistoryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metricq.HistoryResponse";
  }
  protected:
  explicit HistoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_history_2eproto);
    return ::descriptor_table_history_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef HistoryResponse_Aggregate Aggregate;

  // accessors -------------------------------------------------------

  enum : int {
    kTimeDeltaFieldNumber = 2,
    kValueMinFieldNumber = 3,
    kValueMaxFieldNumber = 4,
    kValueAvgFieldNumber = 5,
    kAggregateFieldNumber = 6,
    kValueFieldNumber = 7,
    kMetricFieldNumber = 1,
    kErrorFieldNumber = 8,
  };
  // repeated int64 time_delta = 2;
  int time_delta_size() const;
  private:
  int _internal_time_delta_size() const;
  public:
  void clear_time_delta();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_delta(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_time_delta() const;
  void _internal_add_time_delta(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_time_delta();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 time_delta(int index) const;
  void set_time_delta(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_time_delta(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      time_delta() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_time_delta();

  // repeated double value_min = 3 [deprecated = true];
  PROTOBUF_DEPRECATED int value_min_size() const;
  private:
  int _internal_value_min_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_value_min();
  private:
  double _internal_value_min(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_value_min() const;
  void _internal_add_value_min(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_value_min();
  public:
  PROTOBUF_DEPRECATED double value_min(int index) const;
  PROTOBUF_DEPRECATED void set_value_min(int index, double value);
  PROTOBUF_DEPRECATED void add_value_min(double value);
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      value_min() const;
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_value_min();

  // repeated double value_max = 4 [deprecated = true];
  PROTOBUF_DEPRECATED int value_max_size() const;
  private:
  int _internal_value_max_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_value_max();
  private:
  double _internal_value_max(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_value_max() const;
  void _internal_add_value_max(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_value_max();
  public:
  PROTOBUF_DEPRECATED double value_max(int index) const;
  PROTOBUF_DEPRECATED void set_value_max(int index, double value);
  PROTOBUF_DEPRECATED void add_value_max(double value);
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      value_max() const;
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_value_max();

  // repeated double value_avg = 5 [deprecated = true];
  PROTOBUF_DEPRECATED int value_avg_size() const;
  private:
  int _internal_value_avg_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_value_avg();
  private:
  double _internal_value_avg(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_value_avg() const;
  void _internal_add_value_avg(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_value_avg();
  public:
  PROTOBUF_DEPRECATED double value_avg(int index) const;
  PROTOBUF_DEPRECATED void set_value_avg(int index, double value);
  PROTOBUF_DEPRECATED void add_value_avg(double value);
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      value_avg() const;
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_value_avg();

  // repeated .metricq.HistoryResponse.Aggregate aggregate = 6;
  int aggregate_size() const;
  private:
  int _internal_aggregate_size() const;
  public:
  void clear_aggregate();
  ::metricq::HistoryResponse_Aggregate* mutable_aggregate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metricq::HistoryResponse_Aggregate >*
      mutable_aggregate();
  private:
  const ::metricq::HistoryResponse_Aggregate& _internal_aggregate(int index) const;
  ::metricq::HistoryResponse_Aggregate* _internal_add_aggregate();
  public:
  const ::metricq::HistoryResponse_Aggregate& aggregate(int index) const;
  ::metricq::HistoryResponse_Aggregate* add_aggregate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metricq::HistoryResponse_Aggregate >&
      aggregate() const;

  // repeated double value = 7;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  double _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_value() const;
  void _internal_add_value(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_value();
  public:
  double value(int index) const;
  void set_value(int index, double value);
  void add_value(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_value();

  // string metric = 1;
  void clear_metric();
  const std::string& metric() const;
  void set_metric(const std::string& value);
  void set_metric(std::string&& value);
  void set_metric(const char* value);
  void set_metric(const char* value, size_t size);
  std::string* mutable_metric();
  std::string* release_metric();
  void set_allocated_metric(std::string* metric);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_metric();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_metric(
      std::string* metric);
  private:
  const std::string& _internal_metric() const;
  void _internal_set_metric(const std::string& value);
  std::string* _internal_mutable_metric();
  public:

  // string error = 8;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_error();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_error(
      std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:metricq.HistoryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > time_delta_;
  mutable std::atomic<int> _time_delta_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > value_min_;
  mutable std::atomic<int> _value_min_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > value_max_;
  mutable std::atomic<int> _value_max_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > value_avg_;
  mutable std::atomic<int> _value_avg_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metricq::HistoryResponse_Aggregate > aggregate_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metric_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_history_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HistoryRequest

// int64 start_time = 1;
inline void HistoryRequest::clear_start_time() {
  start_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HistoryRequest::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HistoryRequest::start_time() const {
  // @@protoc_insertion_point(field_get:metricq.HistoryRequest.start_time)
  return _internal_start_time();
}
inline void HistoryRequest::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  start_time_ = value;
}
inline void HistoryRequest::set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:metricq.HistoryRequest.start_time)
}

// int64 end_time = 2;
inline void HistoryRequest::clear_end_time() {
  end_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HistoryRequest::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HistoryRequest::end_time() const {
  // @@protoc_insertion_point(field_get:metricq.HistoryRequest.end_time)
  return _internal_end_time();
}
inline void HistoryRequest::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  end_time_ = value;
}
inline void HistoryRequest::set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:metricq.HistoryRequest.end_time)
}

// int64 interval_max = 3;
inline void HistoryRequest::clear_interval_max() {
  interval_max_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HistoryRequest::_internal_interval_max() const {
  return interval_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HistoryRequest::interval_max() const {
  // @@protoc_insertion_point(field_get:metricq.HistoryRequest.interval_max)
  return _internal_interval_max();
}
inline void HistoryRequest::_internal_set_interval_max(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  interval_max_ = value;
}
inline void HistoryRequest::set_interval_max(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_interval_max(value);
  // @@protoc_insertion_point(field_set:metricq.HistoryRequest.interval_max)
}

// .metricq.HistoryRequest.RequestType type = 4;
inline void HistoryRequest::clear_type() {
  type_ = 0;
}
inline ::metricq::HistoryRequest_RequestType HistoryRequest::_internal_type() const {
  return static_cast< ::metricq::HistoryRequest_RequestType >(type_);
}
inline ::metricq::HistoryRequest_RequestType HistoryRequest::type() const {
  // @@protoc_insertion_point(field_get:metricq.HistoryRequest.type)
  return _internal_type();
}
inline void HistoryRequest::_internal_set_type(::metricq::HistoryRequest_RequestType value) {
  
  type_ = value;
}
inline void HistoryRequest::set_type(::metricq::HistoryRequest_RequestType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:metricq.HistoryRequest.type)
}

// -------------------------------------------------------------------

// HistoryResponse_Aggregate

// double minimum = 1;
inline void HistoryResponse_Aggregate::clear_minimum() {
  minimum_ = 0;
}
inline double HistoryResponse_Aggregate::_internal_minimum() const {
  return minimum_;
}
inline double HistoryResponse_Aggregate::minimum() const {
  // @@protoc_insertion_point(field_get:metricq.HistoryResponse.Aggregate.minimum)
  return _internal_minimum();
}
inline void HistoryResponse_Aggregate::_internal_set_minimum(double value) {
  
  minimum_ = value;
}
inline void HistoryResponse_Aggregate::set_minimum(double value) {
  _internal_set_minimum(value);
  // @@protoc_insertion_point(field_set:metricq.HistoryResponse.Aggregate.minimum)
}

// double maximum = 2;
inline void HistoryResponse_Aggregate::clear_maximum() {
  maximum_ = 0;
}
inline double HistoryResponse_Aggregate::_internal_maximum() const {
  return maximum_;
}
inline double HistoryResponse_Aggregate::maximum() const {
  // @@protoc_insertion_point(field_get:metricq.HistoryResponse.Aggregate.maximum)
  return _internal_maximum();
}
inline void HistoryResponse_Aggregate::_internal_set_maximum(double value) {
  
  maximum_ = value;
}
inline void HistoryResponse_Aggregate::set_maximum(double value) {
  _internal_set_maximum(value);
  // @@protoc_insertion_point(field_set:metricq.HistoryResponse.Aggregate.maximum)
}

// double sum = 3;
inline void HistoryResponse_Aggregate::clear_sum() {
  sum_ = 0;
}
inline double HistoryResponse_Aggregate::_internal_sum() const {
  return sum_;
}
inline double HistoryResponse_Aggregate::sum() const {
  // @@protoc_insertion_point(field_get:metricq.HistoryResponse.Aggregate.sum)
  return _internal_sum();
}
inline void HistoryResponse_Aggregate::_internal_set_sum(double value) {
  
  sum_ = value;
}
inline void HistoryResponse_Aggregate::set_sum(double value) {
  _internal_set_sum(value);
  // @@protoc_insertion_point(field_set:metricq.HistoryResponse.Aggregate.sum)
}

// uint64 count = 4;
inline void HistoryResponse_Aggregate::clear_count() {
  count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HistoryResponse_Aggregate::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HistoryResponse_Aggregate::count() const {
  // @@protoc_insertion_point(field_get:metricq.HistoryResponse.Aggregate.count)
  return _internal_count();
}
inline void HistoryResponse_Aggregate::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  count_ = value;
}
inline void HistoryResponse_Aggregate::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:metricq.HistoryResponse.Aggregate.count)
}

// double integral = 5;
inline void HistoryResponse_Aggregate::clear_integral() {
  integral_ = 0;
}
inline double HistoryResponse_Aggregate::_internal_integral() const {
  return integral_;
}
inline double HistoryResponse_Aggregate::integral() const {
  // @@protoc_insertion_point(field_get:metricq.HistoryResponse.Aggregate.integral)
  return _internal_integral();
}
inline void HistoryResponse_Aggregate::_internal_set_integral(double value) {
  
  integral_ = value;
}
inline void HistoryResponse_Aggregate::set_integral(double value) {
  _internal_set_integral(value);
  // @@protoc_insertion_point(field_set:metricq.HistoryResponse.Aggregate.integral)
}

// int64 active_time = 6;
inline void HistoryResponse_Aggregate::clear_active_time() {
  active_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HistoryResponse_Aggregate::_internal_active_time() const {
  return active_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HistoryResponse_Aggregate::active_time() const {
  // @@protoc_insertion_point(field_get:metricq.HistoryResponse.Aggregate.active_time)
  return _internal_active_time();
}
inline void HistoryResponse_Aggregate::_internal_set_active_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  active_time_ = value;
}
inline void HistoryResponse_Aggregate::set_active_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_active_time(value);
  // @@protoc_insertion_point(field_set:metricq.HistoryResponse.Aggregate.active_time)
}

// -------------------------------------------------------------------

// HistoryResponse

// string metric = 1;
inline void HistoryResponse::clear_metric() {
  metric_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HistoryResponse::metric() const {
  // @@protoc_insertion_point(field_get:metricq.HistoryResponse.metric)
  return _internal_metric();
}
inline void HistoryResponse::set_metric(const std::string& value) {
  _internal_set_metric(value);
  // @@protoc_insertion_point(field_set:metricq.HistoryResponse.metric)
}
inline std::string* HistoryResponse::mutable_metric() {
  // @@protoc_insertion_point(field_mutable:metricq.HistoryResponse.metric)
  return _internal_mutable_metric();
}
inline const std::string& HistoryResponse::_internal_metric() const {
  return metric_.Get();
}
inline void HistoryResponse::_internal_set_metric(const std::string& value) {
  
  metric_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HistoryResponse::set_metric(std::string&& value) {
  
  metric_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:metricq.HistoryResponse.metric)
}
inline void HistoryResponse::set_metric(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metric_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:metricq.HistoryResponse.metric)
}
inline void HistoryResponse::set_metric(const char* value,
    size_t size) {
  
  metric_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:metricq.HistoryResponse.metric)
}
inline std::string* HistoryResponse::_internal_mutable_metric() {
  
  return metric_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HistoryResponse::release_metric() {
  // @@protoc_insertion_point(field_release:metricq.HistoryResponse.metric)
  return metric_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HistoryResponse::set_allocated_metric(std::string* metric) {
  if (metric != nullptr) {
    
  } else {
    
  }
  metric_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metric,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:metricq.HistoryResponse.metric)
}
inline std::string* HistoryResponse::unsafe_arena_release_metric() {
  // @@protoc_insertion_point(field_unsafe_arena_release:metricq.HistoryResponse.metric)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return metric_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HistoryResponse::unsafe_arena_set_allocated_metric(
    std::string* metric) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (metric != nullptr) {
    
  } else {
    
  }
  metric_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      metric, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metricq.HistoryResponse.metric)
}

// repeated int64 time_delta = 2;
inline int HistoryResponse::_internal_time_delta_size() const {
  return time_delta_.size();
}
inline int HistoryResponse::time_delta_size() const {
  return _internal_time_delta_size();
}
inline void HistoryResponse::clear_time_delta() {
  time_delta_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HistoryResponse::_internal_time_delta(int index) const {
  return time_delta_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HistoryResponse::time_delta(int index) const {
  // @@protoc_insertion_point(field_get:metricq.HistoryResponse.time_delta)
  return _internal_time_delta(index);
}
inline void HistoryResponse::set_time_delta(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  time_delta_.Set(index, value);
  // @@protoc_insertion_point(field_set:metricq.HistoryResponse.time_delta)
}
inline void HistoryResponse::_internal_add_time_delta(::PROTOBUF_NAMESPACE_ID::int64 value) {
  time_delta_.Add(value);
}
inline void HistoryResponse::add_time_delta(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_time_delta(value);
  // @@protoc_insertion_point(field_add:metricq.HistoryResponse.time_delta)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
HistoryResponse::_internal_time_delta() const {
  return time_delta_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
HistoryResponse::time_delta() const {
  // @@protoc_insertion_point(field_list:metricq.HistoryResponse.time_delta)
  return _internal_time_delta();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
HistoryResponse::_internal_mutable_time_delta() {
  return &time_delta_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
HistoryResponse::mutable_time_delta() {
  // @@protoc_insertion_point(field_mutable_list:metricq.HistoryResponse.time_delta)
  return _internal_mutable_time_delta();
}

// repeated double value_min = 3 [deprecated = true];
inline int HistoryResponse::_internal_value_min_size() const {
  return value_min_.size();
}
inline int HistoryResponse::value_min_size() const {
  return _internal_value_min_size();
}
inline void HistoryResponse::clear_value_min() {
  value_min_.Clear();
}
inline double HistoryResponse::_internal_value_min(int index) const {
  return value_min_.Get(index);
}
inline double HistoryResponse::value_min(int index) const {
  // @@protoc_insertion_point(field_get:metricq.HistoryResponse.value_min)
  return _internal_value_min(index);
}
inline void HistoryResponse::set_value_min(int index, double value) {
  value_min_.Set(index, value);
  // @@protoc_insertion_point(field_set:metricq.HistoryResponse.value_min)
}
inline void HistoryResponse::_internal_add_value_min(double value) {
  value_min_.Add(value);
}
inline void HistoryResponse::add_value_min(double value) {
  _internal_add_value_min(value);
  // @@protoc_insertion_point(field_add:metricq.HistoryResponse.value_min)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
HistoryResponse::_internal_value_min() const {
  return value_min_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
HistoryResponse::value_min() const {
  // @@protoc_insertion_point(field_list:metricq.HistoryResponse.value_min)
  return _internal_value_min();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
HistoryResponse::_internal_mutable_value_min() {
  return &value_min_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
HistoryResponse::mutable_value_min() {
  // @@protoc_insertion_point(field_mutable_list:metricq.HistoryResponse.value_min)
  return _internal_mutable_value_min();
}

// repeated double value_max = 4 [deprecated = true];
inline int HistoryResponse::_internal_value_max_size() const {
  return value_max_.size();
}
inline int HistoryResponse::value_max_size() const {
  return _internal_value_max_size();
}
inline void HistoryResponse::clear_value_max() {
  value_max_.Clear();
}
inline double HistoryResponse::_internal_value_max(int index) const {
  return value_max_.Get(index);
}
inline double HistoryResponse::value_max(int index) const {
  // @@protoc_insertion_point(field_get:metricq.HistoryResponse.value_max)
  return _internal_value_max(index);
}
inline void HistoryResponse::set_value_max(int index, double value) {
  value_max_.Set(index, value);
  // @@protoc_insertion_point(field_set:metricq.HistoryResponse.value_max)
}
inline void HistoryResponse::_internal_add_value_max(double value) {
  value_max_.Add(value);
}
inline void HistoryResponse::add_value_max(double value) {
  _internal_add_value_max(value);
  // @@protoc_insertion_point(field_add:metricq.HistoryResponse.value_max)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
HistoryResponse::_internal_value_max() const {
  return value_max_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
HistoryResponse::value_max() const {
  // @@protoc_insertion_point(field_list:metricq.HistoryResponse.value_max)
  return _internal_value_max();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
HistoryResponse::_internal_mutable_value_max() {
  return &value_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
HistoryResponse::mutable_value_max() {
  // @@protoc_insertion_point(field_mutable_list:metricq.HistoryResponse.value_max)
  return _internal_mutable_value_max();
}

// repeated double value_avg = 5 [deprecated = true];
inline int HistoryResponse::_internal_value_avg_size() const {
  return value_avg_.size();
}
inline int HistoryResponse::value_avg_size() const {
  return _internal_value_avg_size();
}
inline void HistoryResponse::clear_value_avg() {
  value_avg_.Clear();
}
inline double HistoryResponse::_internal_value_avg(int index) const {
  return value_avg_.Get(index);
}
inline double HistoryResponse::value_avg(int index) const {
  // @@protoc_insertion_point(field_get:metricq.HistoryResponse.value_avg)
  return _internal_value_avg(index);
}
inline void HistoryResponse::set_value_avg(int index, double value) {
  value_avg_.Set(index, value);
  // @@protoc_insertion_point(field_set:metricq.HistoryResponse.value_avg)
}
inline void HistoryResponse::_internal_add_value_avg(double value) {
  value_avg_.Add(value);
}
inline void HistoryResponse::add_value_avg(double value) {
  _internal_add_value_avg(value);
  // @@protoc_insertion_point(field_add:metricq.HistoryResponse.value_avg)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
HistoryResponse::_internal_value_avg() const {
  return value_avg_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
HistoryResponse::value_avg() const {
  // @@protoc_insertion_point(field_list:metricq.HistoryResponse.value_avg)
  return _internal_value_avg();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
HistoryResponse::_internal_mutable_value_avg() {
  return &value_avg_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
HistoryResponse::mutable_value_avg() {
  // @@protoc_insertion_point(field_mutable_list:metricq.HistoryResponse.value_avg)
  return _internal_mutable_value_avg();
}

// repeated .metricq.HistoryResponse.Aggregate aggregate = 6;
inline int HistoryResponse::_internal_aggregate_size() const {
  return aggregate_.size();
}
inline int HistoryResponse::aggregate_size() const {
  return _internal_aggregate_size();
}
inline void HistoryResponse::clear_aggregate() {
  aggregate_.Clear();
}
inline ::metricq::HistoryResponse_Aggregate* HistoryResponse::mutable_aggregate(int index) {
  // @@protoc_insertion_point(field_mutable:metricq.HistoryResponse.aggregate)
  return aggregate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metricq::HistoryResponse_Aggregate >*
HistoryResponse::mutable_aggregate() {
  // @@protoc_insertion_point(field_mutable_list:metricq.HistoryResponse.aggregate)
  return &aggregate_;
}
inline const ::metricq::HistoryResponse_Aggregate& HistoryResponse::_internal_aggregate(int index) const {
  return aggregate_.Get(index);
}
inline const ::metricq::HistoryResponse_Aggregate& HistoryResponse::aggregate(int index) const {
  // @@protoc_insertion_point(field_get:metricq.HistoryResponse.aggregate)
  return _internal_aggregate(index);
}
inline ::metricq::HistoryResponse_Aggregate* HistoryResponse::_internal_add_aggregate() {
  return aggregate_.Add();
}
inline ::metricq::HistoryResponse_Aggregate* HistoryResponse::add_aggregate() {
  // @@protoc_insertion_point(field_add:metricq.HistoryResponse.aggregate)
  return _internal_add_aggregate();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metricq::HistoryResponse_Aggregate >&
HistoryResponse::aggregate() const {
  // @@protoc_insertion_point(field_list:metricq.HistoryResponse.aggregate)
  return aggregate_;
}

// repeated double value = 7;
inline int HistoryResponse::_internal_value_size() const {
  return value_.size();
}
inline int HistoryResponse::value_size() const {
  return _internal_value_size();
}
inline void HistoryResponse::clear_value() {
  value_.Clear();
}
inline double HistoryResponse::_internal_value(int index) const {
  return value_.Get(index);
}
inline double HistoryResponse::value(int index) const {
  // @@protoc_insertion_point(field_get:metricq.HistoryResponse.value)
  return _internal_value(index);
}
inline void HistoryResponse::set_value(int index, double value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:metricq.HistoryResponse.value)
}
inline void HistoryResponse::_internal_add_value(double value) {
  value_.Add(value);
}
inline void HistoryResponse::add_value(double value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:metricq.HistoryResponse.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
HistoryResponse::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
HistoryResponse::value() const {
  // @@protoc_insertion_point(field_list:metricq.HistoryResponse.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
HistoryResponse::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
HistoryResponse::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:metricq.HistoryResponse.value)
  return _internal_mutable_value();
}

// string error = 8;
inline void HistoryResponse::clear_error() {
  error_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HistoryResponse::error() const {
  // @@protoc_insertion_point(field_get:metricq.HistoryResponse.error)
  return _internal_error();
}
inline void HistoryResponse::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:metricq.HistoryResponse.error)
}
inline std::string* HistoryResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:metricq.HistoryResponse.error)
  return _internal_mutable_error();
}
inline const std::string& HistoryResponse::_internal_error() const {
  return error_.Get();
}
inline void HistoryResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HistoryResponse::set_error(std::string&& value) {
  
  error_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:metricq.HistoryResponse.error)
}
inline void HistoryResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:metricq.HistoryResponse.error)
}
inline void HistoryResponse::set_error(const char* value,
    size_t size) {
  
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:metricq.HistoryResponse.error)
}
inline std::string* HistoryResponse::_internal_mutable_error() {
  
  return error_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HistoryResponse::release_error() {
  // @@protoc_insertion_point(field_release:metricq.HistoryResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HistoryResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:metricq.HistoryResponse.error)
}
inline std::string* HistoryResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:metricq.HistoryResponse.error)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return error_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HistoryResponse::unsafe_arena_set_allocated_error(
    std::string* error) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (error != nullptr) {
    
  } else {
    
  }
  error_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      error, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metricq.HistoryResponse.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace metricq

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::metricq::HistoryRequest_RequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::metricq::HistoryRequest_RequestType>() {
  return ::metricq::HistoryRequest_RequestType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_history_2eproto
